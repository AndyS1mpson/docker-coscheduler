// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: service.proto

package task

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Node with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Node) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Node with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NodeMultiError, or nil if none found.
func (m *Node) ValidateAll() error {
	return m.validate(true)
}

func (m *Node) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	// no validation rules for Port

	if len(errors) > 0 {
		return NodeMultiError(errors)
	}

	return nil
}

// NodeMultiError is an error wrapping multiple validation errors returned by
// Node.ValidateAll() if the designated constraints aren't met.
type NodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeMultiError) AllErrors() []error { return m }

// NodeValidationError is the validation error returned by Node.Validate if the
// designated constraints aren't met.
type NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeValidationError) ErrorName() string { return "NodeValidationError" }

// Error satisfies the builtin error interface
func (e NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeValidationError{}

// Validate checks the field values on CPUsOpt with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CPUsOpt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CPUsOpt with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CPUsOptMultiError, or nil if none found.
func (m *CPUsOpt) ValidateAll() error {
	return m.validate(true)
}

func (m *CPUsOpt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for From

	// no validation rules for Count

	if len(errors) > 0 {
		return CPUsOptMultiError(errors)
	}

	return nil
}

// CPUsOptMultiError is an error wrapping multiple validation errors returned
// by CPUsOpt.ValidateAll() if the designated constraints aren't met.
type CPUsOptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CPUsOptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CPUsOptMultiError) AllErrors() []error { return m }

// CPUsOptValidationError is the validation error returned by CPUsOpt.Validate
// if the designated constraints aren't met.
type CPUsOptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CPUsOptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CPUsOptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CPUsOptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CPUsOptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CPUsOptValidationError) ErrorName() string { return "CPUsOptValidationError" }

// Error satisfies the builtin error interface
func (e CPUsOptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCPUsOpt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CPUsOptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CPUsOptValidationError{}

// Validate checks the field values on GetNodeInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNodeInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeInfoResponseMultiError, or nil if none found.
func (m *GetNodeInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CpuNums

	// no validation rules for Uri

	// no validation rules for Port

	if len(errors) > 0 {
		return GetNodeInfoResponseMultiError(errors)
	}

	return nil
}

// GetNodeInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetNodeInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNodeInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeInfoResponseMultiError) AllErrors() []error { return m }

// GetNodeInfoResponseValidationError is the validation error returned by
// GetNodeInfoResponse.Validate if the designated constraints aren't met.
type GetNodeInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeInfoResponseValidationError) ErrorName() string {
	return "GetNodeInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeInfoResponseValidationError{}

// Validate checks the field values on GetNodeResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNodeResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeResourcesResponseMultiError, or nil if none found.
func (m *GetNodeResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cpu

	// no validation rules for Memory

	if len(errors) > 0 {
		return GetNodeResourcesResponseMultiError(errors)
	}

	return nil
}

// GetNodeResourcesResponseMultiError is an error wrapping multiple validation
// errors returned by GetNodeResourcesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNodeResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeResourcesResponseMultiError) AllErrors() []error { return m }

// GetNodeResourcesResponseValidationError is the validation error returned by
// GetNodeResourcesResponse.Validate if the designated constraints aren't met.
type GetNodeResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeResourcesResponseValidationError) ErrorName() string {
	return "GetNodeResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeResourcesResponseValidationError{}

// Validate checks the field values on BuildTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BuildTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuildTaskRequestMultiError, or nil if none found.
func (m *BuildTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTaskTitle()) < 1 {
		err := BuildTaskRequestValidationError{
			field:  "TaskTitle",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetImageArchive()) < 3 {
		err := BuildTaskRequestValidationError{
			field:  "ImageArchive",
			reason: "value length must be at least 3 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BuildTaskRequestMultiError(errors)
	}

	return nil
}

// BuildTaskRequestMultiError is an error wrapping multiple validation errors
// returned by BuildTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type BuildTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildTaskRequestMultiError) AllErrors() []error { return m }

// BuildTaskRequestValidationError is the validation error returned by
// BuildTaskRequest.Validate if the designated constraints aren't met.
type BuildTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildTaskRequestValidationError) ErrorName() string { return "BuildTaskRequestValidationError" }

// Error satisfies the builtin error interface
func (e BuildTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildTaskRequestValidationError{}

// Validate checks the field values on BuildTaskResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BuildTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuildTaskResponseMultiError, or nil if none found.
func (m *BuildTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for ImageId

	if all {
		switch v := interface{}(m.GetNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BuildTaskResponseValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BuildTaskResponseValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BuildTaskResponseValidationError{
				field:  "Node",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return BuildTaskResponseMultiError(errors)
	}

	return nil
}

// BuildTaskResponseMultiError is an error wrapping multiple validation errors
// returned by BuildTaskResponse.ValidateAll() if the designated constraints
// aren't met.
type BuildTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildTaskResponseMultiError) AllErrors() []error { return m }

// BuildTaskResponseValidationError is the validation error returned by
// BuildTaskResponse.Validate if the designated constraints aren't met.
type BuildTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildTaskResponseValidationError) ErrorName() string {
	return "BuildTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BuildTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildTaskResponseValidationError{}

// Validate checks the field values on CreateTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTaskRequestMultiError, or nil if none found.
func (m *CreateTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImageId

	if all {
		switch v := interface{}(m.GetCpusOpt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTaskRequestValidationError{
					field:  "CpusOpt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTaskRequestValidationError{
					field:  "CpusOpt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCpusOpt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTaskRequestValidationError{
				field:  "CpusOpt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTaskRequestMultiError(errors)
	}

	return nil
}

// CreateTaskRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTaskRequestMultiError) AllErrors() []error { return m }

// CreateTaskRequestValidationError is the validation error returned by
// CreateTaskRequest.Validate if the designated constraints aren't met.
type CreateTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskRequestValidationError) ErrorName() string {
	return "CreateTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskRequestValidationError{}

// Validate checks the field values on CreateTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTaskResponseMultiError, or nil if none found.
func (m *CreateTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContainerId

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateTaskResponseMultiError(errors)
	}

	return nil
}

// CreateTaskResponseMultiError is an error wrapping multiple validation errors
// returned by CreateTaskResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTaskResponseMultiError) AllErrors() []error { return m }

// CreateTaskResponseValidationError is the validation error returned by
// CreateTaskResponse.Validate if the designated constraints aren't met.
type CreateTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskResponseValidationError) ErrorName() string {
	return "CreateTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskResponseValidationError{}

// Validate checks the field values on StartTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StartTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartTaskRequestMultiError, or nil if none found.
func (m *StartTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContainerId

	if len(errors) > 0 {
		return StartTaskRequestMultiError(errors)
	}

	return nil
}

// StartTaskRequestMultiError is an error wrapping multiple validation errors
// returned by StartTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type StartTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartTaskRequestMultiError) AllErrors() []error { return m }

// StartTaskRequestValidationError is the validation error returned by
// StartTaskRequest.Validate if the designated constraints aren't met.
type StartTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartTaskRequestValidationError) ErrorName() string { return "StartTaskRequestValidationError" }

// Error satisfies the builtin error interface
func (e StartTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartTaskRequestValidationError{}

// Validate checks the field values on PauseTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PauseTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PauseTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PauseTaskRequestMultiError, or nil if none found.
func (m *PauseTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PauseTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContainerId

	if len(errors) > 0 {
		return PauseTaskRequestMultiError(errors)
	}

	return nil
}

// PauseTaskRequestMultiError is an error wrapping multiple validation errors
// returned by PauseTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type PauseTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PauseTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PauseTaskRequestMultiError) AllErrors() []error { return m }

// PauseTaskRequestValidationError is the validation error returned by
// PauseTaskRequest.Validate if the designated constraints aren't met.
type PauseTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PauseTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PauseTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PauseTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PauseTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PauseTaskRequestValidationError) ErrorName() string { return "PauseTaskRequestValidationError" }

// Error satisfies the builtin error interface
func (e PauseTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPauseTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PauseTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PauseTaskRequestValidationError{}

// Validate checks the field values on ResumeTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResumeTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResumeTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResumeTaskRequestMultiError, or nil if none found.
func (m *ResumeTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResumeTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContainerId

	if len(errors) > 0 {
		return ResumeTaskRequestMultiError(errors)
	}

	return nil
}

// ResumeTaskRequestMultiError is an error wrapping multiple validation errors
// returned by ResumeTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type ResumeTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResumeTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResumeTaskRequestMultiError) AllErrors() []error { return m }

// ResumeTaskRequestValidationError is the validation error returned by
// ResumeTaskRequest.Validate if the designated constraints aren't met.
type ResumeTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResumeTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResumeTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResumeTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResumeTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResumeTaskRequestValidationError) ErrorName() string {
	return "ResumeTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResumeTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResumeTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResumeTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResumeTaskRequestValidationError{}

// Validate checks the field values on StopTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StopTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopTaskRequestMultiError, or nil if none found.
func (m *StopTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContainerId

	if len(errors) > 0 {
		return StopTaskRequestMultiError(errors)
	}

	return nil
}

// StopTaskRequestMultiError is an error wrapping multiple validation errors
// returned by StopTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type StopTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopTaskRequestMultiError) AllErrors() []error { return m }

// StopTaskRequestValidationError is the validation error returned by
// StopTaskRequest.Validate if the designated constraints aren't met.
type StopTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopTaskRequestValidationError) ErrorName() string { return "StopTaskRequestValidationError" }

// Error satisfies the builtin error interface
func (e StopTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopTaskRequestValidationError{}

// Validate checks the field values on UpdateTaskResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTaskResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTaskResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTaskResourcesRequestMultiError, or nil if none found.
func (m *UpdateTaskResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTaskResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContainerId

	if all {
		switch v := interface{}(m.GetCpusOpt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTaskResourcesRequestValidationError{
					field:  "CpusOpt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTaskResourcesRequestValidationError{
					field:  "CpusOpt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCpusOpt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTaskResourcesRequestValidationError{
				field:  "CpusOpt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTaskResourcesRequestMultiError(errors)
	}

	return nil
}

// UpdateTaskResourcesRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateTaskResourcesRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateTaskResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTaskResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTaskResourcesRequestMultiError) AllErrors() []error { return m }

// UpdateTaskResourcesRequestValidationError is the validation error returned
// by UpdateTaskResourcesRequest.Validate if the designated constraints aren't met.
type UpdateTaskResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTaskResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTaskResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTaskResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTaskResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTaskResourcesRequestValidationError) ErrorName() string {
	return "UpdateTaskResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTaskResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTaskResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTaskResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTaskResourcesRequestValidationError{}

// Validate checks the field values on GetContainerInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetContainerInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContainerInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetContainerInfoRequestMultiError, or nil if none found.
func (m *GetContainerInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContainerInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContainerId

	if len(errors) > 0 {
		return GetContainerInfoRequestMultiError(errors)
	}

	return nil
}

// GetContainerInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetContainerInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetContainerInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContainerInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContainerInfoRequestMultiError) AllErrors() []error { return m }

// GetContainerInfoRequestValidationError is the validation error returned by
// GetContainerInfoRequest.Validate if the designated constraints aren't met.
type GetContainerInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContainerInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContainerInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContainerInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContainerInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContainerInfoRequestValidationError) ErrorName() string {
	return "GetContainerInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetContainerInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContainerInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContainerInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContainerInfoRequestValidationError{}

// Validate checks the field values on GetContainerInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetContainerInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContainerInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetContainerInfoResponseMultiError, or nil if none found.
func (m *GetContainerInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContainerInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for State

	// no validation rules for ExitCode

	if len(errors) > 0 {
		return GetContainerInfoResponseMultiError(errors)
	}

	return nil
}

// GetContainerInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetContainerInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetContainerInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContainerInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContainerInfoResponseMultiError) AllErrors() []error { return m }

// GetContainerInfoResponseValidationError is the validation error returned by
// GetContainerInfoResponse.Validate if the designated constraints aren't met.
type GetContainerInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContainerInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContainerInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContainerInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContainerInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContainerInfoResponseValidationError) ErrorName() string {
	return "GetContainerInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetContainerInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContainerInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContainerInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContainerInfoResponseValidationError{}

// Validate checks the field values on MeasureTaskSpeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeasureTaskSpeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeasureTaskSpeedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeasureTaskSpeedRequestMultiError, or nil if none found.
func (m *MeasureTaskSpeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MeasureTaskSpeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeasureTaskSpeedRequestValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeasureTaskSpeedRequestValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasureTaskSpeedRequestValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ContainerId

	if all {
		switch v := interface{}(m.GetCpusOpt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeasureTaskSpeedRequestValidationError{
					field:  "CpusOpt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeasureTaskSpeedRequestValidationError{
					field:  "CpusOpt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCpusOpt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasureTaskSpeedRequestValidationError{
				field:  "CpusOpt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MeasureTaskSpeedRequestMultiError(errors)
	}

	return nil
}

// MeasureTaskSpeedRequestMultiError is an error wrapping multiple validation
// errors returned by MeasureTaskSpeedRequest.ValidateAll() if the designated
// constraints aren't met.
type MeasureTaskSpeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeasureTaskSpeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeasureTaskSpeedRequestMultiError) AllErrors() []error { return m }

// MeasureTaskSpeedRequestValidationError is the validation error returned by
// MeasureTaskSpeedRequest.Validate if the designated constraints aren't met.
type MeasureTaskSpeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasureTaskSpeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasureTaskSpeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasureTaskSpeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasureTaskSpeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasureTaskSpeedRequestValidationError) ErrorName() string {
	return "MeasureTaskSpeedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MeasureTaskSpeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasureTaskSpeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasureTaskSpeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasureTaskSpeedRequestValidationError{}

// Validate checks the field values on MeasureTaskSpeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MeasureTaskSpeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MeasureTaskSpeedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MeasureTaskSpeedResponseMultiError, or nil if none found.
func (m *MeasureTaskSpeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MeasureTaskSpeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeasureTaskSpeedResponseValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeasureTaskSpeedResponseValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeasureTaskSpeedResponseValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MeasureTaskSpeedResponseMultiError(errors)
	}

	return nil
}

// MeasureTaskSpeedResponseMultiError is an error wrapping multiple validation
// errors returned by MeasureTaskSpeedResponse.ValidateAll() if the designated
// constraints aren't met.
type MeasureTaskSpeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeasureTaskSpeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeasureTaskSpeedResponseMultiError) AllErrors() []error { return m }

// MeasureTaskSpeedResponseValidationError is the validation error returned by
// MeasureTaskSpeedResponse.Validate if the designated constraints aren't met.
type MeasureTaskSpeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeasureTaskSpeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeasureTaskSpeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeasureTaskSpeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeasureTaskSpeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeasureTaskSpeedResponseValidationError) ErrorName() string {
	return "MeasureTaskSpeedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MeasureTaskSpeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeasureTaskSpeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeasureTaskSpeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeasureTaskSpeedResponseValidationError{}
